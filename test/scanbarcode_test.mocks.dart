// Mocks generated by Mockito 5.4.4 from annotations
// in mobilepos_app/test/scanbarcode_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i10;

import 'package:flutter/widgets.dart' as _i3;
import 'package:mobile_scanner/src/enums/barcode_format.dart' as _i7;
import 'package:mobile_scanner/src/enums/camera_facing.dart' as _i6;
import 'package:mobile_scanner/src/enums/detection_speed.dart' as _i5;
import 'package:mobile_scanner/src/mobile_scanner_controller.dart' as _i4;
import 'package:mobile_scanner/src/objects/barcode_capture.dart' as _i9;
import 'package:mobile_scanner/src/objects/mobile_scanner_state.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMobileScannerState_0 extends _i1.SmartFake
    implements _i2.MobileScannerState {
  _FakeMobileScannerState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [MobileScannerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMobileScannerController extends _i1.Mock
    implements _i4.MobileScannerController {
  @override
  bool get autoStart => (super.noSuchMethod(
        Invocation.getter(#autoStart),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.DetectionSpeed get detectionSpeed => (super.noSuchMethod(
        Invocation.getter(#detectionSpeed),
        returnValue: _i5.DetectionSpeed.noDuplicates,
        returnValueForMissingStub: _i5.DetectionSpeed.noDuplicates,
      ) as _i5.DetectionSpeed);

  @override
  int get detectionTimeoutMs => (super.noSuchMethod(
        Invocation.getter(#detectionTimeoutMs),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i6.CameraFacing get facing => (super.noSuchMethod(
        Invocation.getter(#facing),
        returnValue: _i6.CameraFacing.front,
        returnValueForMissingStub: _i6.CameraFacing.front,
      ) as _i6.CameraFacing);

  @override
  List<_i7.BarcodeFormat> get formats => (super.noSuchMethod(
        Invocation.getter(#formats),
        returnValue: <_i7.BarcodeFormat>[],
        returnValueForMissingStub: <_i7.BarcodeFormat>[],
      ) as List<_i7.BarcodeFormat>);

  @override
  bool get returnImage => (super.noSuchMethod(
        Invocation.getter(#returnImage),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get torchEnabled => (super.noSuchMethod(
        Invocation.getter(#torchEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get useNewCameraSelector => (super.noSuchMethod(
        Invocation.getter(#useNewCameraSelector),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i9.BarcodeCapture> get barcodes => (super.noSuchMethod(
        Invocation.getter(#barcodes),
        returnValue: _i8.Stream<_i9.BarcodeCapture>.empty(),
        returnValueForMissingStub: _i8.Stream<_i9.BarcodeCapture>.empty(),
      ) as _i8.Stream<_i9.BarcodeCapture>);

  @override
  _i2.MobileScannerState get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeMobileScannerState_0(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeMobileScannerState_0(
          this,
          Invocation.getter(#value),
        ),
      ) as _i2.MobileScannerState);

  @override
  set value(_i2.MobileScannerState? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i9.BarcodeCapture?> analyzeImage(
    String? path, {
    List<_i7.BarcodeFormat>? formats = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImage,
          [path],
          {#formats: formats},
        ),
        returnValue: _i8.Future<_i9.BarcodeCapture?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.BarcodeCapture?>.value(),
      ) as _i8.Future<_i9.BarcodeCapture?>);

  @override
  _i3.Widget buildCameraView() => (super.noSuchMethod(
        Invocation.method(
          #buildCameraView,
          [],
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildCameraView,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeWidget_1(
          this,
          Invocation.method(
            #buildCameraView,
            [],
          ),
        ),
      ) as _i3.Widget);

  @override
  _i8.Future<void> resetZoomScale() => (super.noSuchMethod(
        Invocation.method(
          #resetZoomScale,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setZoomScale(double? zoomScale) => (super.noSuchMethod(
        Invocation.method(
          #setZoomScale,
          [zoomScale],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> start({_i6.CameraFacing? cameraDirection}) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {#cameraDirection: cameraDirection},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> switchCamera() => (super.noSuchMethod(
        Invocation.method(
          #switchCamera,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> toggleTorch() => (super.noSuchMethod(
        Invocation.method(
          #toggleTorch,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateScanWindow(_i10.Rect? window) => (super.noSuchMethod(
        Invocation.method(
          #updateScanWindow,
          [window],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i3.NavigatorObserver {
  @override
  void didPush(
    _i3.Route<dynamic>? route,
    _i3.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i3.Route<dynamic>? route,
    _i3.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i3.Route<dynamic>? route,
    _i3.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i3.Route<dynamic>? newRoute,
    _i3.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i3.Route<dynamic>? route,
    _i3.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
